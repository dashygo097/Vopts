`timescale 1ns / 1ps
// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
// VCS coverage exclude_file
module mem_16x8(
  input  [3:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [7:0] R0_data,
  input  [3:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data
);

  reg [7:0] Memory[0:15];
  reg       _R0_en_d0;
  reg [3:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 8'bx;
endmodule

module SyncRAMCore(
  input        clock,
  input  [3:0] io_addr,
  input  [7:0] io_dataIn,
  output [7:0] io_dataOut,
  input        io_en_we,
               io_en_re
);

  mem_16x8 mem_ext (
    .R0_addr (io_addr),
    .R0_en   (io_en_re),
    .R0_clk  (clock),
    .R0_data (io_dataOut),
    .W0_addr (io_addr),
    .W0_en   (io_en_we),
    .W0_clk  (clock),
    .W0_data (io_dataIn)
  );
endmodule

// external module BidirectionalBuffer

module FSMCSlaveRAMCore(
  input       clock,
              reset,
              io_ne,
              io_noe,
              io_nwe,
  input [3:0] io_addr,
  inout [7:0] io_data
);

  wire [7:0]      _bi_buffer_dataIn;
  wire [7:0]      _mem_io_dataOut;
  reg  [1:0]      cnt;
  reg  [3:0]      addrNext;
  wire            _GEN = cnt == 2'h0;
  wire            _GEN_0 = cnt == 2'h1;
  wire            _GEN_1 = cnt == 2'h2;
  wire            _GEN_2 = _GEN | _GEN_0;
  wire            _GEN_3 = ~_GEN & _GEN_0;
  wire [3:0][3:0] _GEN_4 = {{4'h0}, {addrNext}, {addrNext}, {4'h0}};
  always @(posedge clock) begin
    if (reset) begin
      cnt <= 2'h0;
      addrNext <= 4'h0;
    end
    else if (_GEN) begin
      automatic logic _GEN_5 = ~io_ne & ~io_noe;
      automatic logic _GEN_6 = ~io_ne & io_noe;
      cnt <= _GEN_5 ? 2'h1 : {_GEN_6, 1'h0};
      if (_GEN_5 | _GEN_6)
        addrNext <= io_addr;
    end
    else begin
      if (_GEN_0)
        cnt <= {1'h0, ~(io_ne | io_noe)};
      else
        cnt <= 2'h0;
      if (_GEN_0 | ~(_GEN_1 & io_nwe)) begin
      end
      else
        addrNext <= io_addr;
    end
  end // always @(posedge)
  SyncRAMCore mem (
    .clock      (clock),
    .io_addr    (_GEN_4[cnt]),
    .io_dataIn  (_GEN_2 | ~(_GEN_1 & ~io_nwe) ? 8'h0 : _bi_buffer_dataIn),
    .io_dataOut (_mem_io_dataOut),
    .io_en_we   (~_GEN_2 & _GEN_1 & ~io_nwe),
    .io_en_re   (_GEN_3)
  );
  BidirectionalBuffer bi_buffer (
    .dataIO  (io_data),
    .dataIn  (_bi_buffer_dataIn),
    .dataOut (_GEN | ~_GEN_0 ? 8'h0 : _mem_io_dataOut),
    .oe      (_GEN_3)
  );
endmodule


// ----- 8< ----- FILE "./bidirectional_buffer.sv" ----- 8< -----

// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5

module BidirectionalBuffer(
  inout  [7:0] dataIO,
  output [7:0] dataIn,
  input  [7:0] dataOut,
  input  oe
);
  
  // Tristate buffer
  assign dataIO = oe ? dataOut : 8'bz;
  
  // Always read from bus
  assign dataIn = dataIO;
  
endmodule
    

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

bidirectional_buffer.sv
