`timescale 1ns / 1ps
// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
module AutoLinearInterpolatorCore(
  input         clock,
                reset,
  input  [31:0] io_in_value,
  output [31:0] io_out_value
);

  reg  [31:0] prev_value;
  reg  [31:0] next_value;
  reg  [31:0] counter;
  reg  [31:0] clkDivision;
  reg  [31:0] safeDivision;
  wire        _changed_T_6 =
    (io_in_value == next_value | $signed(io_in_value) < $signed(next_value))
    & (next_value == io_in_value | $signed(next_value) < $signed(io_in_value));
  wire [31:0] _io_out_fl_value_T = next_value - prev_value;
  wire [51:0] _io_out_fl_value_T_4 =
    {{20{_io_out_fl_value_T[31]}}, _io_out_fl_value_T}
    * {{20{counter[11]}}, counter[11:0], 20'h0};
  wire [52:0] _io_out_fl_value_T_8 =
    $signed({_io_out_fl_value_T_4[51], _io_out_fl_value_T_4[51:20], 20'h0})
    / $signed({{21{safeDivision[11]}}, safeDivision[11:0], 20'h0});
  always @(posedge clock) begin
    if (~_changed_T_6) begin
      prev_value <= next_value;
      next_value <= io_in_value;
    end
    if (reset) begin
      counter <= 32'h0;
      clkDivision <= 32'h1;
      safeDivision <= 32'h1;
    end
    else begin
      if (_changed_T_6)
        counter <= counter + 32'h1;
      else begin
        counter <= 32'h0;
        clkDivision <= counter;
      end
      safeDivision <= clkDivision == 32'h0 ? 32'h1 : clkDivision;
    end
  end // always @(posedge)
  assign io_out_value =
    _changed_T_6 ? prev_value + _io_out_fl_value_T_8[31:0] : next_value;
endmodule

