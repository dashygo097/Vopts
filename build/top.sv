`timescale 1ns / 1ps
// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
module AsyncFIFOCtrlCore(
  input        reset,
  output [6:0] io_waddr,
               io_raddr,
  input        io_wr,
               io_rd,
  output       io_empty,
               io_full,
  input        io_wclk,
               io_rclk
);

  reg  [7:0] wPtr;
  reg  [7:0] wPtrGrayReg;
  reg  [7:0] rPtrGraySync_sync1;
  reg  [7:0] rPtrGraySync;
  wire [7:0] _wPtrPlus1_T_5 = wPtr + 8'h1;
  wire [7:0] wPtrPlus1 = (&(wPtr[6:0])) ? {~(wPtr[7]), 7'h0} : _wPtrPlus1_T_5;
  wire       io_full_0 = ({1'h0, wPtrPlus1[7:1]} ^ wPtrPlus1) == rPtrGraySync;
  wire [7:0] _io_waddr_T_1 = {1'h0, wPtr[6:0]} % 8'h80;
  reg  [7:0] rPtr;
  reg  [7:0] rPtrGrayReg;
  reg  [7:0] wPtrGraySync_sync1;
  reg  [7:0] wPtrGraySync;
  wire       io_empty_0 = rPtrGrayReg == wPtrGraySync;
  wire [7:0] _io_raddr_T_1 = {1'h0, rPtr[6:0]} % 8'h80;
  always @(posedge io_wclk) begin
    if (reset) begin
      wPtr <= 8'h0;
      wPtrGrayReg <= 8'h0;
    end
    else begin
      automatic logic       _wPtrNext_T_1 = io_wr & ~io_full_0;
      automatic logic [7:0] wPtrNext = _wPtrNext_T_1 ? _wPtrPlus1_T_5 : wPtr;
      if (_wPtrNext_T_1)
        wPtr <= _wPtrPlus1_T_5;
      wPtrGrayReg <= {1'h0, wPtrNext[7:1]} ^ wPtrNext;
    end
    rPtrGraySync_sync1 <= rPtrGrayReg;
    rPtrGraySync <= rPtrGraySync_sync1;
  end // always @(posedge)
  always @(posedge io_rclk) begin
    if (reset) begin
      rPtr <= 8'h0;
      rPtrGrayReg <= 8'h0;
    end
    else begin
      automatic logic [7:0] _rPtrBinIncr_T;
      automatic logic       _rPtrNext_T_1 = io_rd & ~io_empty_0;
      automatic logic [7:0] rPtrNext;
      _rPtrBinIncr_T = rPtr + 8'h1;
      rPtrNext = _rPtrNext_T_1 ? _rPtrBinIncr_T : rPtr;
      if (_rPtrNext_T_1)
        rPtr <= _rPtrBinIncr_T;
      rPtrGrayReg <= {1'h0, rPtrNext[7:1]} ^ rPtrNext;
    end
    wPtrGraySync_sync1 <= wPtrGrayReg;
    wPtrGraySync <= wPtrGraySync_sync1;
  end // always @(posedge)
  assign io_waddr = _io_waddr_T_1[6:0];
  assign io_raddr = _io_raddr_T_1[6:0];
  assign io_empty = io_empty_0;
  assign io_full = io_full_0;
endmodule

module RegisterFileCore(
  input         clock,
                reset,
  input  [6:0]  io_raddr,
                io_waddr,
  input         io_we,
  input  [11:0] io_wdata_value,
  output [11:0] io_rdata_value
);

  reg  [11:0]        regFile_0_value;
  reg  [11:0]        regFile_1_value;
  reg  [11:0]        regFile_2_value;
  reg  [11:0]        regFile_3_value;
  reg  [11:0]        regFile_4_value;
  reg  [11:0]        regFile_5_value;
  reg  [11:0]        regFile_6_value;
  reg  [11:0]        regFile_7_value;
  reg  [11:0]        regFile_8_value;
  reg  [11:0]        regFile_9_value;
  reg  [11:0]        regFile_10_value;
  reg  [11:0]        regFile_11_value;
  reg  [11:0]        regFile_12_value;
  reg  [11:0]        regFile_13_value;
  reg  [11:0]        regFile_14_value;
  reg  [11:0]        regFile_15_value;
  reg  [11:0]        regFile_16_value;
  reg  [11:0]        regFile_17_value;
  reg  [11:0]        regFile_18_value;
  reg  [11:0]        regFile_19_value;
  reg  [11:0]        regFile_20_value;
  reg  [11:0]        regFile_21_value;
  reg  [11:0]        regFile_22_value;
  reg  [11:0]        regFile_23_value;
  reg  [11:0]        regFile_24_value;
  reg  [11:0]        regFile_25_value;
  reg  [11:0]        regFile_26_value;
  reg  [11:0]        regFile_27_value;
  reg  [11:0]        regFile_28_value;
  reg  [11:0]        regFile_29_value;
  reg  [11:0]        regFile_30_value;
  reg  [11:0]        regFile_31_value;
  reg  [11:0]        regFile_32_value;
  reg  [11:0]        regFile_33_value;
  reg  [11:0]        regFile_34_value;
  reg  [11:0]        regFile_35_value;
  reg  [11:0]        regFile_36_value;
  reg  [11:0]        regFile_37_value;
  reg  [11:0]        regFile_38_value;
  reg  [11:0]        regFile_39_value;
  reg  [11:0]        regFile_40_value;
  reg  [11:0]        regFile_41_value;
  reg  [11:0]        regFile_42_value;
  reg  [11:0]        regFile_43_value;
  reg  [11:0]        regFile_44_value;
  reg  [11:0]        regFile_45_value;
  reg  [11:0]        regFile_46_value;
  reg  [11:0]        regFile_47_value;
  reg  [11:0]        regFile_48_value;
  reg  [11:0]        regFile_49_value;
  reg  [11:0]        regFile_50_value;
  reg  [11:0]        regFile_51_value;
  reg  [11:0]        regFile_52_value;
  reg  [11:0]        regFile_53_value;
  reg  [11:0]        regFile_54_value;
  reg  [11:0]        regFile_55_value;
  reg  [11:0]        regFile_56_value;
  reg  [11:0]        regFile_57_value;
  reg  [11:0]        regFile_58_value;
  reg  [11:0]        regFile_59_value;
  reg  [11:0]        regFile_60_value;
  reg  [11:0]        regFile_61_value;
  reg  [11:0]        regFile_62_value;
  reg  [11:0]        regFile_63_value;
  reg  [11:0]        regFile_64_value;
  reg  [11:0]        regFile_65_value;
  reg  [11:0]        regFile_66_value;
  reg  [11:0]        regFile_67_value;
  reg  [11:0]        regFile_68_value;
  reg  [11:0]        regFile_69_value;
  reg  [11:0]        regFile_70_value;
  reg  [11:0]        regFile_71_value;
  reg  [11:0]        regFile_72_value;
  reg  [11:0]        regFile_73_value;
  reg  [11:0]        regFile_74_value;
  reg  [11:0]        regFile_75_value;
  reg  [11:0]        regFile_76_value;
  reg  [11:0]        regFile_77_value;
  reg  [11:0]        regFile_78_value;
  reg  [11:0]        regFile_79_value;
  reg  [11:0]        regFile_80_value;
  reg  [11:0]        regFile_81_value;
  reg  [11:0]        regFile_82_value;
  reg  [11:0]        regFile_83_value;
  reg  [11:0]        regFile_84_value;
  reg  [11:0]        regFile_85_value;
  reg  [11:0]        regFile_86_value;
  reg  [11:0]        regFile_87_value;
  reg  [11:0]        regFile_88_value;
  reg  [11:0]        regFile_89_value;
  reg  [11:0]        regFile_90_value;
  reg  [11:0]        regFile_91_value;
  reg  [11:0]        regFile_92_value;
  reg  [11:0]        regFile_93_value;
  reg  [11:0]        regFile_94_value;
  reg  [11:0]        regFile_95_value;
  reg  [11:0]        regFile_96_value;
  reg  [11:0]        regFile_97_value;
  reg  [11:0]        regFile_98_value;
  reg  [11:0]        regFile_99_value;
  reg  [11:0]        regFile_100_value;
  reg  [11:0]        regFile_101_value;
  reg  [11:0]        regFile_102_value;
  reg  [11:0]        regFile_103_value;
  reg  [11:0]        regFile_104_value;
  reg  [11:0]        regFile_105_value;
  reg  [11:0]        regFile_106_value;
  reg  [11:0]        regFile_107_value;
  reg  [11:0]        regFile_108_value;
  reg  [11:0]        regFile_109_value;
  reg  [11:0]        regFile_110_value;
  reg  [11:0]        regFile_111_value;
  reg  [11:0]        regFile_112_value;
  reg  [11:0]        regFile_113_value;
  reg  [11:0]        regFile_114_value;
  reg  [11:0]        regFile_115_value;
  reg  [11:0]        regFile_116_value;
  reg  [11:0]        regFile_117_value;
  reg  [11:0]        regFile_118_value;
  reg  [11:0]        regFile_119_value;
  reg  [11:0]        regFile_120_value;
  reg  [11:0]        regFile_121_value;
  reg  [11:0]        regFile_122_value;
  reg  [11:0]        regFile_123_value;
  reg  [11:0]        regFile_124_value;
  reg  [11:0]        regFile_125_value;
  reg  [11:0]        regFile_126_value;
  reg  [11:0]        regFile_127_value;
  wire [127:0][11:0] _GEN =
    {{regFile_127_value},
     {regFile_126_value},
     {regFile_125_value},
     {regFile_124_value},
     {regFile_123_value},
     {regFile_122_value},
     {regFile_121_value},
     {regFile_120_value},
     {regFile_119_value},
     {regFile_118_value},
     {regFile_117_value},
     {regFile_116_value},
     {regFile_115_value},
     {regFile_114_value},
     {regFile_113_value},
     {regFile_112_value},
     {regFile_111_value},
     {regFile_110_value},
     {regFile_109_value},
     {regFile_108_value},
     {regFile_107_value},
     {regFile_106_value},
     {regFile_105_value},
     {regFile_104_value},
     {regFile_103_value},
     {regFile_102_value},
     {regFile_101_value},
     {regFile_100_value},
     {regFile_99_value},
     {regFile_98_value},
     {regFile_97_value},
     {regFile_96_value},
     {regFile_95_value},
     {regFile_94_value},
     {regFile_93_value},
     {regFile_92_value},
     {regFile_91_value},
     {regFile_90_value},
     {regFile_89_value},
     {regFile_88_value},
     {regFile_87_value},
     {regFile_86_value},
     {regFile_85_value},
     {regFile_84_value},
     {regFile_83_value},
     {regFile_82_value},
     {regFile_81_value},
     {regFile_80_value},
     {regFile_79_value},
     {regFile_78_value},
     {regFile_77_value},
     {regFile_76_value},
     {regFile_75_value},
     {regFile_74_value},
     {regFile_73_value},
     {regFile_72_value},
     {regFile_71_value},
     {regFile_70_value},
     {regFile_69_value},
     {regFile_68_value},
     {regFile_67_value},
     {regFile_66_value},
     {regFile_65_value},
     {regFile_64_value},
     {regFile_63_value},
     {regFile_62_value},
     {regFile_61_value},
     {regFile_60_value},
     {regFile_59_value},
     {regFile_58_value},
     {regFile_57_value},
     {regFile_56_value},
     {regFile_55_value},
     {regFile_54_value},
     {regFile_53_value},
     {regFile_52_value},
     {regFile_51_value},
     {regFile_50_value},
     {regFile_49_value},
     {regFile_48_value},
     {regFile_47_value},
     {regFile_46_value},
     {regFile_45_value},
     {regFile_44_value},
     {regFile_43_value},
     {regFile_42_value},
     {regFile_41_value},
     {regFile_40_value},
     {regFile_39_value},
     {regFile_38_value},
     {regFile_37_value},
     {regFile_36_value},
     {regFile_35_value},
     {regFile_34_value},
     {regFile_33_value},
     {regFile_32_value},
     {regFile_31_value},
     {regFile_30_value},
     {regFile_29_value},
     {regFile_28_value},
     {regFile_27_value},
     {regFile_26_value},
     {regFile_25_value},
     {regFile_24_value},
     {regFile_23_value},
     {regFile_22_value},
     {regFile_21_value},
     {regFile_20_value},
     {regFile_19_value},
     {regFile_18_value},
     {regFile_17_value},
     {regFile_16_value},
     {regFile_15_value},
     {regFile_14_value},
     {regFile_13_value},
     {regFile_12_value},
     {regFile_11_value},
     {regFile_10_value},
     {regFile_9_value},
     {regFile_8_value},
     {regFile_7_value},
     {regFile_6_value},
     {regFile_5_value},
     {regFile_4_value},
     {regFile_3_value},
     {regFile_2_value},
     {regFile_1_value},
     {regFile_0_value}};
  always @(posedge clock) begin
    if (reset) begin
      regFile_0_value <= 12'h0;
      regFile_1_value <= 12'h0;
      regFile_2_value <= 12'h0;
      regFile_3_value <= 12'h0;
      regFile_4_value <= 12'h0;
      regFile_5_value <= 12'h0;
      regFile_6_value <= 12'h0;
      regFile_7_value <= 12'h0;
      regFile_8_value <= 12'h0;
      regFile_9_value <= 12'h0;
      regFile_10_value <= 12'h0;
      regFile_11_value <= 12'h0;
      regFile_12_value <= 12'h0;
      regFile_13_value <= 12'h0;
      regFile_14_value <= 12'h0;
      regFile_15_value <= 12'h0;
      regFile_16_value <= 12'h0;
      regFile_17_value <= 12'h0;
      regFile_18_value <= 12'h0;
      regFile_19_value <= 12'h0;
      regFile_20_value <= 12'h0;
      regFile_21_value <= 12'h0;
      regFile_22_value <= 12'h0;
      regFile_23_value <= 12'h0;
      regFile_24_value <= 12'h0;
      regFile_25_value <= 12'h0;
      regFile_26_value <= 12'h0;
      regFile_27_value <= 12'h0;
      regFile_28_value <= 12'h0;
      regFile_29_value <= 12'h0;
      regFile_30_value <= 12'h0;
      regFile_31_value <= 12'h0;
      regFile_32_value <= 12'h0;
      regFile_33_value <= 12'h0;
      regFile_34_value <= 12'h0;
      regFile_35_value <= 12'h0;
      regFile_36_value <= 12'h0;
      regFile_37_value <= 12'h0;
      regFile_38_value <= 12'h0;
      regFile_39_value <= 12'h0;
      regFile_40_value <= 12'h0;
      regFile_41_value <= 12'h0;
      regFile_42_value <= 12'h0;
      regFile_43_value <= 12'h0;
      regFile_44_value <= 12'h0;
      regFile_45_value <= 12'h0;
      regFile_46_value <= 12'h0;
      regFile_47_value <= 12'h0;
      regFile_48_value <= 12'h0;
      regFile_49_value <= 12'h0;
      regFile_50_value <= 12'h0;
      regFile_51_value <= 12'h0;
      regFile_52_value <= 12'h0;
      regFile_53_value <= 12'h0;
      regFile_54_value <= 12'h0;
      regFile_55_value <= 12'h0;
      regFile_56_value <= 12'h0;
      regFile_57_value <= 12'h0;
      regFile_58_value <= 12'h0;
      regFile_59_value <= 12'h0;
      regFile_60_value <= 12'h0;
      regFile_61_value <= 12'h0;
      regFile_62_value <= 12'h0;
      regFile_63_value <= 12'h0;
      regFile_64_value <= 12'h0;
      regFile_65_value <= 12'h0;
      regFile_66_value <= 12'h0;
      regFile_67_value <= 12'h0;
      regFile_68_value <= 12'h0;
      regFile_69_value <= 12'h0;
      regFile_70_value <= 12'h0;
      regFile_71_value <= 12'h0;
      regFile_72_value <= 12'h0;
      regFile_73_value <= 12'h0;
      regFile_74_value <= 12'h0;
      regFile_75_value <= 12'h0;
      regFile_76_value <= 12'h0;
      regFile_77_value <= 12'h0;
      regFile_78_value <= 12'h0;
      regFile_79_value <= 12'h0;
      regFile_80_value <= 12'h0;
      regFile_81_value <= 12'h0;
      regFile_82_value <= 12'h0;
      regFile_83_value <= 12'h0;
      regFile_84_value <= 12'h0;
      regFile_85_value <= 12'h0;
      regFile_86_value <= 12'h0;
      regFile_87_value <= 12'h0;
      regFile_88_value <= 12'h0;
      regFile_89_value <= 12'h0;
      regFile_90_value <= 12'h0;
      regFile_91_value <= 12'h0;
      regFile_92_value <= 12'h0;
      regFile_93_value <= 12'h0;
      regFile_94_value <= 12'h0;
      regFile_95_value <= 12'h0;
      regFile_96_value <= 12'h0;
      regFile_97_value <= 12'h0;
      regFile_98_value <= 12'h0;
      regFile_99_value <= 12'h0;
      regFile_100_value <= 12'h0;
      regFile_101_value <= 12'h0;
      regFile_102_value <= 12'h0;
      regFile_103_value <= 12'h0;
      regFile_104_value <= 12'h0;
      regFile_105_value <= 12'h0;
      regFile_106_value <= 12'h0;
      regFile_107_value <= 12'h0;
      regFile_108_value <= 12'h0;
      regFile_109_value <= 12'h0;
      regFile_110_value <= 12'h0;
      regFile_111_value <= 12'h0;
      regFile_112_value <= 12'h0;
      regFile_113_value <= 12'h0;
      regFile_114_value <= 12'h0;
      regFile_115_value <= 12'h0;
      regFile_116_value <= 12'h0;
      regFile_117_value <= 12'h0;
      regFile_118_value <= 12'h0;
      regFile_119_value <= 12'h0;
      regFile_120_value <= 12'h0;
      regFile_121_value <= 12'h0;
      regFile_122_value <= 12'h0;
      regFile_123_value <= 12'h0;
      regFile_124_value <= 12'h0;
      regFile_125_value <= 12'h0;
      regFile_126_value <= 12'h0;
      regFile_127_value <= 12'h0;
    end
    else begin
      if (io_we & io_waddr == 7'h0)
        regFile_0_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1)
        regFile_1_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2)
        regFile_2_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3)
        regFile_3_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4)
        regFile_4_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5)
        regFile_5_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6)
        regFile_6_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h7)
        regFile_7_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h8)
        regFile_8_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h9)
        regFile_9_value <= io_wdata_value;
      if (io_we & io_waddr == 7'hA)
        regFile_10_value <= io_wdata_value;
      if (io_we & io_waddr == 7'hB)
        regFile_11_value <= io_wdata_value;
      if (io_we & io_waddr == 7'hC)
        regFile_12_value <= io_wdata_value;
      if (io_we & io_waddr == 7'hD)
        regFile_13_value <= io_wdata_value;
      if (io_we & io_waddr == 7'hE)
        regFile_14_value <= io_wdata_value;
      if (io_we & io_waddr == 7'hF)
        regFile_15_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h10)
        regFile_16_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h11)
        regFile_17_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h12)
        regFile_18_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h13)
        regFile_19_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h14)
        regFile_20_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h15)
        regFile_21_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h16)
        regFile_22_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h17)
        regFile_23_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h18)
        regFile_24_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h19)
        regFile_25_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1A)
        regFile_26_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1B)
        regFile_27_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1C)
        regFile_28_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1D)
        regFile_29_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1E)
        regFile_30_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h1F)
        regFile_31_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h20)
        regFile_32_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h21)
        regFile_33_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h22)
        regFile_34_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h23)
        regFile_35_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h24)
        regFile_36_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h25)
        regFile_37_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h26)
        regFile_38_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h27)
        regFile_39_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h28)
        regFile_40_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h29)
        regFile_41_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2A)
        regFile_42_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2B)
        regFile_43_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2C)
        regFile_44_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2D)
        regFile_45_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2E)
        regFile_46_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h2F)
        regFile_47_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h30)
        regFile_48_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h31)
        regFile_49_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h32)
        regFile_50_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h33)
        regFile_51_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h34)
        regFile_52_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h35)
        regFile_53_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h36)
        regFile_54_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h37)
        regFile_55_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h38)
        regFile_56_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h39)
        regFile_57_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3A)
        regFile_58_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3B)
        regFile_59_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3C)
        regFile_60_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3D)
        regFile_61_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3E)
        regFile_62_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h3F)
        regFile_63_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h40)
        regFile_64_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h41)
        regFile_65_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h42)
        regFile_66_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h43)
        regFile_67_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h44)
        regFile_68_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h45)
        regFile_69_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h46)
        regFile_70_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h47)
        regFile_71_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h48)
        regFile_72_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h49)
        regFile_73_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4A)
        regFile_74_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4B)
        regFile_75_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4C)
        regFile_76_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4D)
        regFile_77_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4E)
        regFile_78_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h4F)
        regFile_79_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h50)
        regFile_80_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h51)
        regFile_81_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h52)
        regFile_82_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h53)
        regFile_83_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h54)
        regFile_84_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h55)
        regFile_85_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h56)
        regFile_86_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h57)
        regFile_87_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h58)
        regFile_88_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h59)
        regFile_89_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5A)
        regFile_90_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5B)
        regFile_91_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5C)
        regFile_92_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5D)
        regFile_93_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5E)
        regFile_94_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h5F)
        regFile_95_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h60)
        regFile_96_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h61)
        regFile_97_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h62)
        regFile_98_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h63)
        regFile_99_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h64)
        regFile_100_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h65)
        regFile_101_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h66)
        regFile_102_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h67)
        regFile_103_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h68)
        regFile_104_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h69)
        regFile_105_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6A)
        regFile_106_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6B)
        regFile_107_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6C)
        regFile_108_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6D)
        regFile_109_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6E)
        regFile_110_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h6F)
        regFile_111_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h70)
        regFile_112_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h71)
        regFile_113_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h72)
        regFile_114_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h73)
        regFile_115_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h74)
        regFile_116_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h75)
        regFile_117_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h76)
        regFile_118_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h77)
        regFile_119_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h78)
        regFile_120_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h79)
        regFile_121_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h7A)
        regFile_122_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h7B)
        regFile_123_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h7C)
        regFile_124_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h7D)
        regFile_125_value <= io_wdata_value;
      if (io_we & io_waddr == 7'h7E)
        regFile_126_value <= io_wdata_value;
      if (io_we & (&io_waddr))
        regFile_127_value <= io_wdata_value;
    end
  end // always @(posedge)
  assign io_rdata_value = _GEN[io_raddr];
endmodule

module AsyncFIFOCore(
  input         clock,
                reset,
  input  [11:0] io_wdata_value,
  output [11:0] io_rdata_value,
  input         io_wr,
                io_rd,
  output        io_empty,
                io_full,
  input         io_wclk,
                io_rclk
);

  wire [6:0] _control_io_waddr;
  wire [6:0] _control_io_raddr;
  wire       _control_io_full;
  AsyncFIFOCtrlCore control (
    .reset    (reset),
    .io_waddr (_control_io_waddr),
    .io_raddr (_control_io_raddr),
    .io_wr    (io_wr),
    .io_rd    (io_rd),
    .io_empty (io_empty),
    .io_full  (_control_io_full),
    .io_wclk  (io_wclk),
    .io_rclk  (io_rclk)
  );
  RegisterFileCore register (
    .clock          (clock),
    .reset          (reset),
    .io_raddr       (_control_io_raddr),
    .io_waddr       (_control_io_waddr),
    .io_we          (io_wr & ~_control_io_full),
    .io_wdata_value (io_wdata_value),
    .io_rdata_value (io_rdata_value)
  );
  assign io_full = _control_io_full;
endmodule

module ADC122S625Core(
  input         clock,
                reset,
                io_en,
  output        io_cs_n,
  input         io_sdo,
  output [11:0] io_dataA_value,
                io_dataB_value,
  input         io_sclk,
                io_gateIn,
                io_gateOut,
  output        io_fullA,
                io_fullB,
                io_emptyA,
                io_emptyB
);

  reg  [4:0]  csCounter;
  reg         onSamplingA;
  reg         onSamplingB;
  reg  [11:0] shiftRegA;
  reg  [3:0]  bitCounterA;
  reg  [11:0] shiftRegB;
  reg  [3:0]  bitCounterB;
  wire        _GEN = io_gateIn & io_gateOut;
  wire        _fifoA_io_rd_T = bitCounterA == 4'hB;
  wire        _fifoB_io_rd_T = bitCounterB == 4'hB;
  wire        _GEN_0 = io_gateIn & ~io_gateOut;
  wire        _GEN_1 = ~_GEN_0 & ~io_gateIn & io_gateOut;
  always @(posedge io_sclk) begin
    if (reset) begin
      csCounter <= 5'h0;
      onSamplingA <= 1'h0;
      onSamplingB <= 1'h0;
      shiftRegA <= 12'h0;
      bitCounterA <= 4'h0;
      shiftRegB <= 12'h0;
      bitCounterB <= 4'h0;
    end
    else begin
      if (io_en)
        csCounter <= csCounter + 5'h1;
      else
        csCounter <= 5'h0;
      onSamplingA <= (|(csCounter[4:2])) & ~(csCounter[4]);
      onSamplingB <= csCounter > 5'h13;
      if (io_en & onSamplingA)
        shiftRegA <= {io_sdo, shiftRegA[11:1]};
      if (onSamplingA)
        bitCounterA <= bitCounterA + 4'h1;
      else
        bitCounterA <= 4'h0;
      if (io_en & onSamplingB)
        shiftRegB <= {io_sdo, shiftRegB[11:1]};
      if (onSamplingB)
        bitCounterB <= bitCounterB + 4'h1;
      else
        bitCounterB <= 4'h0;
    end
  end // always @(posedge)
  AsyncFIFOCore fifoA (
    .clock          (clock),
    .reset          (reset),
    .io_wdata_value (shiftRegA),
    .io_rdata_value (io_dataA_value),
    .io_wr          (_GEN ? _fifoA_io_rd_T : _GEN_0 & bitCounterA == 4'hB),
    .io_rd          (_GEN ? _fifoA_io_rd_T : _GEN_1),
    .io_empty       (io_emptyA),
    .io_full        (io_fullA),
    .io_wclk        (io_sclk),
    .io_rclk        (clock)
  );
  AsyncFIFOCore fifoB (
    .clock          (clock),
    .reset          (reset),
    .io_wdata_value (shiftRegB),
    .io_rdata_value (io_dataB_value),
    .io_wr          (_GEN ? _fifoB_io_rd_T : _GEN_0 & bitCounterB == 4'hB),
    .io_rd          (_GEN ? _fifoB_io_rd_T : _GEN_1),
    .io_empty       (io_emptyB),
    .io_full        (io_fullB),
    .io_wclk        (io_sclk),
    .io_rclk        (clock)
  );
  assign io_cs_n = ~io_en;
endmodule

module Top(
  input         clock,
                reset,
                adc1_io_ADC1_EN,
  output        adc1_io_ADC1_CS_N,
  input         adc1_io_ADC1_SDO,
  output [11:0] adc1_io_ADC1_DATA_A_value,
                adc1_io_ADC1_DATA_B_value,
  input         adc1_io_ADC1_SCLK,
                adc1_io_ADC1_GATE_IN,
                adc1_io_ADC1_GATE_OUT,
  output        adc1_io_ADC1_FULL_A,
                adc1_io_ADC1_FULL_B,
                adc1_io_ADC1_EMPTY_A,
                adc1_io_ADC1_EMPTY_B
);

  ADC122S625Core adc1 (
    .clock          (clock),
    .reset          (reset),
    .io_en          (adc1_io_ADC1_EN),
    .io_cs_n        (adc1_io_ADC1_CS_N),
    .io_sdo         (adc1_io_ADC1_SDO),
    .io_dataA_value (adc1_io_ADC1_DATA_A_value),
    .io_dataB_value (adc1_io_ADC1_DATA_B_value),
    .io_sclk        (adc1_io_ADC1_SCLK),
    .io_gateIn      (adc1_io_ADC1_GATE_IN),
    .io_gateOut     (adc1_io_ADC1_GATE_OUT),
    .io_fullA       (adc1_io_ADC1_FULL_A),
    .io_fullB       (adc1_io_ADC1_FULL_B),
    .io_emptyA      (adc1_io_ADC1_EMPTY_A),
    .io_emptyB      (adc1_io_ADC1_EMPTY_B)
  );
endmodule

