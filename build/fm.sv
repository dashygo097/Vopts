`timescale 1ns / 1ps
// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
module TrigCore(
  input         clock,
                reset,
  input  [23:0] io_phase_delta,
  output [31:0] io_out_value
);

  wire [255:0][31:0] _GEN =
    '{32'hFFFF9B7B,
      32'hFFFF3705,
      32'hFFFED2AE,
      32'hFFFE6E86,
      32'hFFFE0A9C,
      32'hFFFDA6FE,
      32'hFFFD43BE,
      32'hFFFCE0E9,
      32'hFFFC7E90,
      32'hFFFC1CC1,
      32'hFFFBBB8C,
      32'hFFFB5AFF,
      32'hFFFAFB29,
      32'hFFFA9C1A,
      32'hFFFA3DDF,
      32'hFFF9E088,
      32'hFFF98422,
      32'hFFF928BC,
      32'hFFF8CE65,
      32'hFFF87529,
      32'hFFF81D17,
      32'hFFF7C63D,
      32'hFFF770A7,
      32'hFFF71C63,
      32'hFFF6C97E,
      32'hFFF67805,
      32'hFFF62803,
      32'hFFF5D987,
      32'hFFF58C9B,
      32'hFFF5414C,
      32'hFFF4F7A5,
      32'hFFF4AFB1,
      32'hFFF4697C,
      32'hFFF42511,
      32'hFFF3E279,
      32'hFFF3A1C0,
      32'hFFF362EF,
      32'hFFF32610,
      32'hFFF2EB2D,
      32'hFFF2B24D,
      32'hFFF27B7B,
      32'hFFF246BF,
      32'hFFF21420,
      32'hFFF1E3A7,
      32'hFFF1B55B,
      32'hFFF18943,
      32'hFFF15F66,
      32'hFFF137CB,
      32'hFFF11277,
      32'hFFF0EF70,
      32'hFFF0CEBC,
      32'hFFF0B060,
      32'hFFF09460,
      32'hFFF07AC1,
      32'hFFF06387,
      32'hFFF04EB5,
      32'hFFF03C4E,
      32'hFFF02C56,
      32'hFFF01ECE,
      32'hFFF013BA,
      32'hFFF00B1A,
      32'hFFF004F0,
      32'hFFF0013C,
      32'hFFF00000,
      32'hFFF0013C,
      32'hFFF004F0,
      32'hFFF00B1A,
      32'hFFF013BA,
      32'hFFF01ECE,
      32'hFFF02C56,
      32'hFFF03C4E,
      32'hFFF04EB5,
      32'hFFF06387,
      32'hFFF07AC1,
      32'hFFF09460,
      32'hFFF0B060,
      32'hFFF0CEBC,
      32'hFFF0EF70,
      32'hFFF11277,
      32'hFFF137CB,
      32'hFFF15F66,
      32'hFFF18943,
      32'hFFF1B55B,
      32'hFFF1E3A7,
      32'hFFF21420,
      32'hFFF246BF,
      32'hFFF27B7B,
      32'hFFF2B24D,
      32'hFFF2EB2D,
      32'hFFF32610,
      32'hFFF362EF,
      32'hFFF3A1C0,
      32'hFFF3E279,
      32'hFFF42511,
      32'hFFF4697C,
      32'hFFF4AFB1,
      32'hFFF4F7A5,
      32'hFFF5414C,
      32'hFFF58C9B,
      32'hFFF5D987,
      32'hFFF62803,
      32'hFFF67805,
      32'hFFF6C97E,
      32'hFFF71C63,
      32'hFFF770A7,
      32'hFFF7C63D,
      32'hFFF81D17,
      32'hFFF87529,
      32'hFFF8CE65,
      32'hFFF928BC,
      32'hFFF98422,
      32'hFFF9E088,
      32'hFFFA3DDF,
      32'hFFFA9C1A,
      32'hFFFAFB29,
      32'hFFFB5AFF,
      32'hFFFBBB8C,
      32'hFFFC1CC1,
      32'hFFFC7E90,
      32'hFFFCE0E9,
      32'hFFFD43BE,
      32'hFFFDA6FE,
      32'hFFFE0A9C,
      32'hFFFE6E86,
      32'hFFFED2AE,
      32'hFFFF3705,
      32'hFFFF9B7B,
      32'h0,
      32'h6485,
      32'hC8FB,
      32'h12D52,
      32'h1917A,
      32'h1F564,
      32'h25902,
      32'h2BC42,
      32'h31F17,
      32'h38170,
      32'h3E33F,
      32'h44474,
      32'h4A501,
      32'h504D7,
      32'h563E6,
      32'h5C221,
      32'h61F78,
      32'h67BDE,
      32'h6D744,
      32'h7319B,
      32'h78AD7,
      32'h7E2E9,
      32'h839C3,
      32'h88F59,
      32'h8E39D,
      32'h93682,
      32'h987FB,
      32'h9D7FD,
      32'hA2679,
      32'hA7365,
      32'hABEB4,
      32'hB085B,
      32'hB504F,
      32'hB9684,
      32'hBDAEF,
      32'hC1D87,
      32'hC5E40,
      32'hC9D11,
      32'hCD9F0,
      32'hD14D3,
      32'hD4DB3,
      32'hD8485,
      32'hDB941,
      32'hDEBE0,
      32'hE1C59,
      32'hE4AA5,
      32'hE76BD,
      32'hEA09A,
      32'hEC835,
      32'hEED89,
      32'hF1090,
      32'hF3144,
      32'hF4FA0,
      32'hF6BA0,
      32'hF853F,
      32'hF9C79,
      32'hFB14B,
      32'hFC3B2,
      32'hFD3AA,
      32'hFE132,
      32'hFEC46,
      32'hFF4E6,
      32'hFFB10,
      32'hFFEC4,
      32'h100000,
      32'hFFEC4,
      32'hFFB10,
      32'hFF4E6,
      32'hFEC46,
      32'hFE132,
      32'hFD3AA,
      32'hFC3B2,
      32'hFB14B,
      32'hF9C79,
      32'hF853F,
      32'hF6BA0,
      32'hF4FA0,
      32'hF3144,
      32'hF1090,
      32'hEED89,
      32'hEC835,
      32'hEA09A,
      32'hE76BD,
      32'hE4AA5,
      32'hE1C59,
      32'hDEBE0,
      32'hDB941,
      32'hD8485,
      32'hD4DB3,
      32'hD14D3,
      32'hCD9F0,
      32'hC9D11,
      32'hC5E40,
      32'hC1D87,
      32'hBDAEF,
      32'hB9684,
      32'hB504F,
      32'hB085B,
      32'hABEB4,
      32'hA7365,
      32'hA2679,
      32'h9D7FD,
      32'h987FB,
      32'h93682,
      32'h8E39D,
      32'h88F59,
      32'h839C3,
      32'h7E2E9,
      32'h78AD7,
      32'h7319B,
      32'h6D744,
      32'h67BDE,
      32'h61F78,
      32'h5C221,
      32'h563E6,
      32'h504D7,
      32'h4A501,
      32'h44474,
      32'h3E33F,
      32'h38170,
      32'h31F17,
      32'h2BC42,
      32'h25902,
      32'h1F564,
      32'h1917A,
      32'h12D52,
      32'hC8FB,
      32'h6485,
      32'h0};
  reg  [23:0]        phase;
  always @(posedge clock) begin
    if (reset)
      phase <= 24'h0;
    else
      phase <= phase + io_phase_delta + 24'hF4240;
  end // always @(posedge)
  assign io_out_value = _GEN[phase[23:16]];
endmodule

module FMCore(
  input         clock,
                reset,
  input  [31:0] io_in_value,
  output [31:0] io_out_value
);

  wire [50:0] _trig_io_phase_delta_T = {{19{io_in_value[31]}}, io_in_value} * 51'h7A120;
  wire [51:0] _trig_io_phase_delta_T_3 =
    $signed({_trig_io_phase_delta_T[50], _trig_io_phase_delta_T}) / 52'sh100000;
  TrigCore trig (
    .clock          (clock),
    .reset          (reset),
    .io_phase_delta (_trig_io_phase_delta_T_3[23:0]),
    .io_out_value   (io_out_value)
  );
endmodule

