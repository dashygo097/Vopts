`timescale 1ns / 1ps
// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
module MCP4921Core(
  input         clock,
                reset,
                io_sclk,
  output        io_cs_n,
                io_sdi,
                io_ldac_n,
  input         io_en,
                io_buf,
                io_gain_n,
                io_shdn_n,
  input  [11:0] io_dataIn_value
);

  reg [1:0]  state;
  reg [4:0]  bitCounter;
  reg [15:0] transmitReg;
  reg        cs_n_reg;
  reg        sdi_reg;
  reg        ldac_n_reg;
  always @(posedge io_sclk) begin
    if (reset) begin
      state <= 2'h0;
      bitCounter <= 5'h0;
      transmitReg <= 16'h0;
      cs_n_reg <= 1'h1;
      sdi_reg <= 1'h0;
      ldac_n_reg <= 1'h1;
    end
    else begin
      automatic logic        _GEN;
      automatic logic        _GEN_0 = state == 2'h1;
      automatic logic        _GEN_1;
      automatic logic [15:0] _sdi_reg_T_3 = transmitReg >> 4'hF - bitCounter[3:0];
      _GEN = state == 2'h0;
      _GEN_1 = _GEN_0 & ~(bitCounter[4]);
      if (io_en) begin
        automatic logic [3:0][1:0] _GEN_2 =
          {{state}, {2'h0}, {bitCounter[4] ? 2'h2 : state}, {io_en ? 2'h1 : state}};
        state <= _GEN_2[state];
        if (_GEN) begin
          if (io_en)
            bitCounter <= 5'h0;
        end
        else if (_GEN_1)
          bitCounter <= bitCounter + 5'h1;
      end
      else begin
        state <= 2'h0;
        bitCounter <= 5'h0;
      end
      if (_GEN & io_en)
        transmitReg <= {1'h0, io_buf, io_gain_n, io_shdn_n, io_dataIn_value};
      cs_n_reg <= ~io_en | (_GEN ? ~io_en & cs_n_reg : _GEN_0 & bitCounter[4] | cs_n_reg);
      sdi_reg <= io_en & (_GEN | ~_GEN_1 ? sdi_reg : _sdi_reg_T_3[0]);
      ldac_n_reg <=
        ~io_en | (_GEN ? io_en | ldac_n_reg : (_GEN_0 | state != 2'h2) & ldac_n_reg);
    end
  end // always @(posedge)
  assign io_cs_n = cs_n_reg;
  assign io_sdi = sdi_reg;
  assign io_ldac_n = ldac_n_reg;
endmodule

