`timescale 1ns / 1ps
// Generated by CIRCT firtool-1.62.1-1-gdf5ed6ea5
module UartTXCore(
  input        clock,
               reset,
  output       io_txd,
               io_channel_ready,
  input        io_channel_valid,
  input  [7:0] io_channel_bits,
  output       io_busy
);

  reg  [1:0] state;
  reg  [7:0] data;
  reg        tick;
  reg  [2:0] bitCounter;
  reg  [9:0] tickCounter;
  wire       _GEN = state == 2'h1;
  wire       _GEN_0 = state == 2'h2;
  always @(posedge clock) begin
    automatic logic _GEN_1;
    _GEN_1 = _GEN_0 & tick;
    if (reset) begin
      state <= 2'h0;
      tick <= 1'h0;
      bitCounter <= 3'h0;
      tickCounter <= 10'h0;
    end
    else begin
      automatic logic _tick_T_1 = tickCounter == 10'h363;
      if (|state) begin
        if (_GEN) begin
          if (tick) begin
            state <= 2'h2;
            bitCounter <= 3'h0;
          end
        end
        else begin
          if (_GEN_0) begin
            if (tick & (&bitCounter))
              state <= 2'h3;
          end
          else if ((&state) & tick)
            state <= 2'h0;
          if (~_GEN_1 | (&bitCounter)) begin
          end
          else
            bitCounter <= bitCounter + 3'h1;
        end
      end
      else if (io_channel_valid)
        state <= 2'h1;
      tick <= _tick_T_1;
      if (_tick_T_1)
        tickCounter <= 10'h0;
      else
        tickCounter <= tickCounter + 10'h1;
    end
    if (|state) begin
      if (_GEN | ~_GEN_1 | (&bitCounter)) begin
      end
      else
        data <= {1'h0, data[7:1]};
    end
    else if (io_channel_valid)
      data <= io_channel_bits;
  end // always @(posedge)
  assign io_txd = ~(|state) | ~_GEN & (~_GEN_0 | data[0]);
  assign io_channel_ready = ~(|state);
  assign io_busy = |state;
endmodule

module UartRXCore(
  input        clock,
               reset,
               io_rxd,
  output       io_channel_valid,
  output [7:0] io_channel_bits,
  output       io_error
);

  reg  [1:0] state;
  reg  [7:0] data;
  reg        tick;
  reg  [2:0] bitCounter;
  reg  [9:0] tickCounter;
  reg        rxd_REG;
  reg        rxd;
  wire       _GEN = state == 2'h0;
  wire       _GEN_0 = state == 2'h1;
  wire       _GEN_1 = state == 2'h2;
  wire       _GEN_2 = _GEN | _GEN_0 | _GEN_1;
  wire       _GEN_3 = (&state) & tick;
  always @(posedge clock) begin
    automatic logic _GEN_4;
    _GEN_4 = _GEN_1 & tick;
    if (reset) begin
      state <= 2'h0;
      tick <= 1'h0;
      bitCounter <= 3'h0;
      tickCounter <= 10'h0;
    end
    else begin
      automatic logic            _tick_T_1 = tickCounter == 10'h363;
      automatic logic [3:0][1:0] _GEN_5 =
        {{_GEN_3 ? 2'h0 : state},
         {tick & (&bitCounter) ? 2'h3 : state},
         {tick ? 2'h2 : state},
         {rxd ? state : 2'h1}};
      state <= _GEN_5[state];
      tick <= _tick_T_1;
      if (~_GEN) begin
        if (_GEN_0) begin
          if (tick)
            bitCounter <= 3'h0;
        end
        else if (~_GEN_4 | (&bitCounter)) begin
        end
        else
          bitCounter <= bitCounter + 3'h1;
      end
      if (_tick_T_1)
        tickCounter <= 10'h0;
      else
        tickCounter <= tickCounter + 10'h1;
    end
    if (_GEN | _GEN_0 | ~_GEN_4) begin
    end
    else
      data <= {rxd, data[7:1]};
    rxd_REG <= io_rxd;
    rxd <= rxd_REG;
  end // always @(posedge)
  assign io_channel_valid = ~_GEN_2 & (&state) & tick;
  assign io_channel_bits = data;
  assign io_error = ~_GEN_2 & _GEN_3 & ~rxd;
endmodule

module UartCore(
  input        clock,
               reset,
  output       io_tx_txd,
               io_tx_channel_ready,
  input        io_tx_channel_valid,
  input  [7:0] io_tx_channel_bits,
  output       io_tx_busy,
  input        io_rx_rxd,
  output       io_rx_channel_valid,
  output [7:0] io_rx_channel_bits,
  output       io_rx_error
);

  UartTXCore tx (
    .clock            (clock),
    .reset            (reset),
    .io_txd           (io_tx_txd),
    .io_channel_ready (io_tx_channel_ready),
    .io_channel_valid (io_tx_channel_valid),
    .io_channel_bits  (io_tx_channel_bits),
    .io_busy          (io_tx_busy)
  );
  UartRXCore rx (
    .clock            (clock),
    .reset            (reset),
    .io_rxd           (io_rx_rxd),
    .io_channel_valid (io_rx_channel_valid),
    .io_channel_bits  (io_rx_channel_bits),
    .io_error         (io_rx_error)
  );
endmodule

module AsyncFIFOCtrlCore(
  input        reset,
  output [5:0] io_waddr,
               io_raddr,
  input        io_wr,
               io_rd,
  output       io_empty,
               io_full,
  input        io_wclk,
               io_rclk
);

  reg  [6:0] wPtr;
  reg  [6:0] wPtrGrayReg;
  reg  [6:0] rPtrGraySync_sync1;
  reg  [6:0] rPtrGraySync;
  wire [6:0] _wPtrPlus1_T_5 = wPtr + 7'h1;
  wire [6:0] wPtrPlus1 = (&(wPtr[5:0])) ? {~(wPtr[6]), 6'h0} : _wPtrPlus1_T_5;
  wire       io_full_0 = ({1'h0, wPtrPlus1[6:1]} ^ wPtrPlus1) == rPtrGraySync;
  wire [6:0] _io_waddr_T_1 = {1'h0, wPtr[5:0]} % 7'h40;
  reg  [6:0] rPtr;
  reg  [6:0] rPtrGrayReg;
  reg  [6:0] wPtrGraySync_sync1;
  reg  [6:0] wPtrGraySync;
  wire       io_empty_0 = rPtrGrayReg == wPtrGraySync;
  wire [6:0] _io_raddr_T_1 = {1'h0, rPtr[5:0]} % 7'h40;
  always @(posedge io_wclk) begin
    if (reset) begin
      wPtr <= 7'h0;
      wPtrGrayReg <= 7'h0;
    end
    else begin
      automatic logic       _wPtrNext_T_1 = io_wr & ~io_full_0;
      automatic logic [6:0] wPtrNext = _wPtrNext_T_1 ? _wPtrPlus1_T_5 : wPtr;
      if (_wPtrNext_T_1)
        wPtr <= _wPtrPlus1_T_5;
      wPtrGrayReg <= {1'h0, wPtrNext[6:1]} ^ wPtrNext;
    end
    rPtrGraySync_sync1 <= rPtrGrayReg;
    rPtrGraySync <= rPtrGraySync_sync1;
  end // always @(posedge)
  always @(posedge io_rclk) begin
    if (reset) begin
      rPtr <= 7'h0;
      rPtrGrayReg <= 7'h0;
    end
    else begin
      automatic logic [6:0] _rPtrBinIncr_T;
      automatic logic       _rPtrNext_T_1 = io_rd & ~io_empty_0;
      automatic logic [6:0] rPtrNext;
      _rPtrBinIncr_T = rPtr + 7'h1;
      rPtrNext = _rPtrNext_T_1 ? _rPtrBinIncr_T : rPtr;
      if (_rPtrNext_T_1)
        rPtr <= _rPtrBinIncr_T;
      rPtrGrayReg <= {1'h0, rPtrNext[6:1]} ^ rPtrNext;
    end
    wPtrGraySync_sync1 <= wPtrGrayReg;
    wPtrGraySync <= wPtrGraySync_sync1;
  end // always @(posedge)
  assign io_waddr = _io_waddr_T_1[5:0];
  assign io_raddr = _io_raddr_T_1[5:0];
  assign io_empty = io_empty_0;
  assign io_full = io_full_0;
endmodule

module RegisterFileCore(
  input         clock,
                reset,
  input  [5:0]  io_raddr,
                io_waddr,
  input         io_we,
  input  [11:0] io_wdata_value,
  output [11:0] io_rdata_value
);

  reg  [11:0]       regFile_0_value;
  reg  [11:0]       regFile_1_value;
  reg  [11:0]       regFile_2_value;
  reg  [11:0]       regFile_3_value;
  reg  [11:0]       regFile_4_value;
  reg  [11:0]       regFile_5_value;
  reg  [11:0]       regFile_6_value;
  reg  [11:0]       regFile_7_value;
  reg  [11:0]       regFile_8_value;
  reg  [11:0]       regFile_9_value;
  reg  [11:0]       regFile_10_value;
  reg  [11:0]       regFile_11_value;
  reg  [11:0]       regFile_12_value;
  reg  [11:0]       regFile_13_value;
  reg  [11:0]       regFile_14_value;
  reg  [11:0]       regFile_15_value;
  reg  [11:0]       regFile_16_value;
  reg  [11:0]       regFile_17_value;
  reg  [11:0]       regFile_18_value;
  reg  [11:0]       regFile_19_value;
  reg  [11:0]       regFile_20_value;
  reg  [11:0]       regFile_21_value;
  reg  [11:0]       regFile_22_value;
  reg  [11:0]       regFile_23_value;
  reg  [11:0]       regFile_24_value;
  reg  [11:0]       regFile_25_value;
  reg  [11:0]       regFile_26_value;
  reg  [11:0]       regFile_27_value;
  reg  [11:0]       regFile_28_value;
  reg  [11:0]       regFile_29_value;
  reg  [11:0]       regFile_30_value;
  reg  [11:0]       regFile_31_value;
  reg  [11:0]       regFile_32_value;
  reg  [11:0]       regFile_33_value;
  reg  [11:0]       regFile_34_value;
  reg  [11:0]       regFile_35_value;
  reg  [11:0]       regFile_36_value;
  reg  [11:0]       regFile_37_value;
  reg  [11:0]       regFile_38_value;
  reg  [11:0]       regFile_39_value;
  reg  [11:0]       regFile_40_value;
  reg  [11:0]       regFile_41_value;
  reg  [11:0]       regFile_42_value;
  reg  [11:0]       regFile_43_value;
  reg  [11:0]       regFile_44_value;
  reg  [11:0]       regFile_45_value;
  reg  [11:0]       regFile_46_value;
  reg  [11:0]       regFile_47_value;
  reg  [11:0]       regFile_48_value;
  reg  [11:0]       regFile_49_value;
  reg  [11:0]       regFile_50_value;
  reg  [11:0]       regFile_51_value;
  reg  [11:0]       regFile_52_value;
  reg  [11:0]       regFile_53_value;
  reg  [11:0]       regFile_54_value;
  reg  [11:0]       regFile_55_value;
  reg  [11:0]       regFile_56_value;
  reg  [11:0]       regFile_57_value;
  reg  [11:0]       regFile_58_value;
  reg  [11:0]       regFile_59_value;
  reg  [11:0]       regFile_60_value;
  reg  [11:0]       regFile_61_value;
  reg  [11:0]       regFile_62_value;
  reg  [11:0]       regFile_63_value;
  wire [63:0][11:0] _GEN =
    {{regFile_63_value},
     {regFile_62_value},
     {regFile_61_value},
     {regFile_60_value},
     {regFile_59_value},
     {regFile_58_value},
     {regFile_57_value},
     {regFile_56_value},
     {regFile_55_value},
     {regFile_54_value},
     {regFile_53_value},
     {regFile_52_value},
     {regFile_51_value},
     {regFile_50_value},
     {regFile_49_value},
     {regFile_48_value},
     {regFile_47_value},
     {regFile_46_value},
     {regFile_45_value},
     {regFile_44_value},
     {regFile_43_value},
     {regFile_42_value},
     {regFile_41_value},
     {regFile_40_value},
     {regFile_39_value},
     {regFile_38_value},
     {regFile_37_value},
     {regFile_36_value},
     {regFile_35_value},
     {regFile_34_value},
     {regFile_33_value},
     {regFile_32_value},
     {regFile_31_value},
     {regFile_30_value},
     {regFile_29_value},
     {regFile_28_value},
     {regFile_27_value},
     {regFile_26_value},
     {regFile_25_value},
     {regFile_24_value},
     {regFile_23_value},
     {regFile_22_value},
     {regFile_21_value},
     {regFile_20_value},
     {regFile_19_value},
     {regFile_18_value},
     {regFile_17_value},
     {regFile_16_value},
     {regFile_15_value},
     {regFile_14_value},
     {regFile_13_value},
     {regFile_12_value},
     {regFile_11_value},
     {regFile_10_value},
     {regFile_9_value},
     {regFile_8_value},
     {regFile_7_value},
     {regFile_6_value},
     {regFile_5_value},
     {regFile_4_value},
     {regFile_3_value},
     {regFile_2_value},
     {regFile_1_value},
     {regFile_0_value}};
  always @(posedge clock) begin
    if (reset) begin
      regFile_0_value <= 12'h0;
      regFile_1_value <= 12'h0;
      regFile_2_value <= 12'h0;
      regFile_3_value <= 12'h0;
      regFile_4_value <= 12'h0;
      regFile_5_value <= 12'h0;
      regFile_6_value <= 12'h0;
      regFile_7_value <= 12'h0;
      regFile_8_value <= 12'h0;
      regFile_9_value <= 12'h0;
      regFile_10_value <= 12'h0;
      regFile_11_value <= 12'h0;
      regFile_12_value <= 12'h0;
      regFile_13_value <= 12'h0;
      regFile_14_value <= 12'h0;
      regFile_15_value <= 12'h0;
      regFile_16_value <= 12'h0;
      regFile_17_value <= 12'h0;
      regFile_18_value <= 12'h0;
      regFile_19_value <= 12'h0;
      regFile_20_value <= 12'h0;
      regFile_21_value <= 12'h0;
      regFile_22_value <= 12'h0;
      regFile_23_value <= 12'h0;
      regFile_24_value <= 12'h0;
      regFile_25_value <= 12'h0;
      regFile_26_value <= 12'h0;
      regFile_27_value <= 12'h0;
      regFile_28_value <= 12'h0;
      regFile_29_value <= 12'h0;
      regFile_30_value <= 12'h0;
      regFile_31_value <= 12'h0;
      regFile_32_value <= 12'h0;
      regFile_33_value <= 12'h0;
      regFile_34_value <= 12'h0;
      regFile_35_value <= 12'h0;
      regFile_36_value <= 12'h0;
      regFile_37_value <= 12'h0;
      regFile_38_value <= 12'h0;
      regFile_39_value <= 12'h0;
      regFile_40_value <= 12'h0;
      regFile_41_value <= 12'h0;
      regFile_42_value <= 12'h0;
      regFile_43_value <= 12'h0;
      regFile_44_value <= 12'h0;
      regFile_45_value <= 12'h0;
      regFile_46_value <= 12'h0;
      regFile_47_value <= 12'h0;
      regFile_48_value <= 12'h0;
      regFile_49_value <= 12'h0;
      regFile_50_value <= 12'h0;
      regFile_51_value <= 12'h0;
      regFile_52_value <= 12'h0;
      regFile_53_value <= 12'h0;
      regFile_54_value <= 12'h0;
      regFile_55_value <= 12'h0;
      regFile_56_value <= 12'h0;
      regFile_57_value <= 12'h0;
      regFile_58_value <= 12'h0;
      regFile_59_value <= 12'h0;
      regFile_60_value <= 12'h0;
      regFile_61_value <= 12'h0;
      regFile_62_value <= 12'h0;
      regFile_63_value <= 12'h0;
    end
    else begin
      if (io_we & io_waddr == 6'h0)
        regFile_0_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1)
        regFile_1_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2)
        regFile_2_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h3)
        regFile_3_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h4)
        regFile_4_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h5)
        regFile_5_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h6)
        regFile_6_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h7)
        regFile_7_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h8)
        regFile_8_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h9)
        regFile_9_value <= io_wdata_value;
      if (io_we & io_waddr == 6'hA)
        regFile_10_value <= io_wdata_value;
      if (io_we & io_waddr == 6'hB)
        regFile_11_value <= io_wdata_value;
      if (io_we & io_waddr == 6'hC)
        regFile_12_value <= io_wdata_value;
      if (io_we & io_waddr == 6'hD)
        regFile_13_value <= io_wdata_value;
      if (io_we & io_waddr == 6'hE)
        regFile_14_value <= io_wdata_value;
      if (io_we & io_waddr == 6'hF)
        regFile_15_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h10)
        regFile_16_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h11)
        regFile_17_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h12)
        regFile_18_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h13)
        regFile_19_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h14)
        regFile_20_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h15)
        regFile_21_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h16)
        regFile_22_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h17)
        regFile_23_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h18)
        regFile_24_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h19)
        regFile_25_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1A)
        regFile_26_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1B)
        regFile_27_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1C)
        regFile_28_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1D)
        regFile_29_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1E)
        regFile_30_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h1F)
        regFile_31_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h20)
        regFile_32_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h21)
        regFile_33_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h22)
        regFile_34_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h23)
        regFile_35_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h24)
        regFile_36_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h25)
        regFile_37_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h26)
        regFile_38_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h27)
        regFile_39_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h28)
        regFile_40_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h29)
        regFile_41_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2A)
        regFile_42_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2B)
        regFile_43_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2C)
        regFile_44_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2D)
        regFile_45_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2E)
        regFile_46_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h2F)
        regFile_47_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h30)
        regFile_48_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h31)
        regFile_49_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h32)
        regFile_50_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h33)
        regFile_51_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h34)
        regFile_52_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h35)
        regFile_53_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h36)
        regFile_54_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h37)
        regFile_55_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h38)
        regFile_56_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h39)
        regFile_57_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h3A)
        regFile_58_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h3B)
        regFile_59_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h3C)
        regFile_60_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h3D)
        regFile_61_value <= io_wdata_value;
      if (io_we & io_waddr == 6'h3E)
        regFile_62_value <= io_wdata_value;
      if (io_we & (&io_waddr))
        regFile_63_value <= io_wdata_value;
    end
  end // always @(posedge)
  assign io_rdata_value = _GEN[io_raddr];
endmodule

module AsyncFIFOCore(
  input         clock,
                reset,
  input  [11:0] io_wdata_value,
  output [11:0] io_rdata_value,
  input         io_wr,
                io_rd,
  output        io_empty,
                io_full,
  input         io_wclk,
                io_rclk
);

  wire [5:0] _control_io_waddr;
  wire [5:0] _control_io_raddr;
  wire       _control_io_full;
  AsyncFIFOCtrlCore control (
    .reset    (reset),
    .io_waddr (_control_io_waddr),
    .io_raddr (_control_io_raddr),
    .io_wr    (io_wr),
    .io_rd    (io_rd),
    .io_empty (io_empty),
    .io_full  (_control_io_full),
    .io_wclk  (io_wclk),
    .io_rclk  (io_rclk)
  );
  RegisterFileCore register (
    .clock          (clock),
    .reset          (reset),
    .io_raddr       (_control_io_raddr),
    .io_waddr       (_control_io_waddr),
    .io_we          (io_wr & ~_control_io_full),
    .io_wdata_value (io_wdata_value),
    .io_rdata_value (io_rdata_value)
  );
  assign io_full = _control_io_full;
endmodule

module ADC122S625Core(
  input         clock,
                reset,
                io_cs_n,
                io_sdo,
  output [11:0] io_dataA_value,
                io_dataB_value,
  input         io_sclk,
                io_gateIn,
                io_gateOut,
  output        io_fullA,
                io_fullB,
                io_emptyA,
                io_emptyB
);

  reg  [4:0]  csCounter;
  reg         onSamplingA;
  reg         onSamplingB;
  reg  [11:0] shiftRegA;
  reg  [3:0]  bitCounterA;
  reg  [11:0] shiftRegB;
  reg  [3:0]  bitCounterB;
  wire        _GEN = io_gateIn & io_gateOut;
  wire        _fifoA_io_rd_T = bitCounterA == 4'hB;
  wire        _fifoB_io_rd_T = bitCounterB == 4'hB;
  wire        _GEN_0 = io_gateIn & ~io_gateOut;
  wire        _GEN_1 = ~_GEN_0 & ~io_gateIn & io_gateOut;
  always @(posedge io_sclk) begin
    if (reset) begin
      csCounter <= 5'h0;
      onSamplingA <= 1'h0;
      onSamplingB <= 1'h0;
      shiftRegA <= 12'h0;
      bitCounterA <= 4'h0;
      shiftRegB <= 12'h0;
      bitCounterB <= 4'h0;
    end
    else begin
      if (io_cs_n)
        csCounter <= 5'h0;
      else
        csCounter <= csCounter + 5'h1;
      onSamplingA <= (|(csCounter[4:2])) & ~(csCounter[4]);
      onSamplingB <= csCounter > 5'h13;
      if (~io_cs_n & onSamplingA)
        shiftRegA <= {io_sdo, shiftRegA[11:1]};
      if (onSamplingA)
        bitCounterA <= bitCounterA + 4'h1;
      else
        bitCounterA <= 4'h0;
      if (~io_cs_n & onSamplingB)
        shiftRegB <= {io_sdo, shiftRegB[11:1]};
      if (onSamplingB)
        bitCounterB <= bitCounterB + 4'h1;
      else
        bitCounterB <= 4'h0;
    end
  end // always @(posedge)
  AsyncFIFOCore fifoA (
    .clock          (clock),
    .reset          (reset),
    .io_wdata_value (shiftRegA),
    .io_rdata_value (io_dataA_value),
    .io_wr          (_GEN ? _fifoA_io_rd_T : _GEN_0 & bitCounterA == 4'hB),
    .io_rd          (_GEN ? _fifoA_io_rd_T : _GEN_1),
    .io_empty       (io_emptyA),
    .io_full        (io_fullA),
    .io_wclk        (io_sclk),
    .io_rclk        (clock)
  );
  AsyncFIFOCore fifoB (
    .clock          (clock),
    .reset          (reset),
    .io_wdata_value (shiftRegB),
    .io_rdata_value (io_dataB_value),
    .io_wr          (_GEN ? _fifoB_io_rd_T : _GEN_0 & bitCounterB == 4'hB),
    .io_rd          (_GEN ? _fifoB_io_rd_T : _GEN_1),
    .io_empty       (io_emptyB),
    .io_full        (io_fullB),
    .io_wclk        (io_sclk),
    .io_rclk        (clock)
  );
endmodule

module MCP4921Core(
  input         reset,
                io_en,
                io_buf,
                io_gain_n,
                io_shdn_n,
  output        io_cs_n,
                io_sdi,
                io_ldac_n,
  input  [11:0] io_dataIn_value,
  input         io_sclk
);

  reg [1:0]  state;
  reg [4:0]  bitCounter;
  reg [15:0] transmitReg;
  reg        cs_n_reg;
  reg        sdi_reg;
  reg        ldac_n_reg;
  always @(posedge io_sclk) begin
    if (reset) begin
      state <= 2'h0;
      bitCounter <= 5'h0;
      transmitReg <= 16'h0;
      cs_n_reg <= 1'h1;
      sdi_reg <= 1'h0;
      ldac_n_reg <= 1'h1;
    end
    else begin
      automatic logic        _GEN;
      automatic logic        _GEN_0 = state == 2'h1;
      automatic logic        _GEN_1;
      automatic logic [15:0] _sdi_reg_T_3 = transmitReg >> 4'hF - bitCounter[3:0];
      _GEN = state == 2'h0;
      _GEN_1 = _GEN_0 & ~(bitCounter[4]);
      if (io_en) begin
        automatic logic [3:0][1:0] _GEN_2 =
          {{state}, {2'h0}, {bitCounter[4] ? 2'h2 : state}, {io_en ? 2'h1 : state}};
        state <= _GEN_2[state];
        if (_GEN) begin
          if (io_en)
            bitCounter <= 5'h0;
        end
        else if (_GEN_1)
          bitCounter <= bitCounter + 5'h1;
      end
      else begin
        state <= 2'h0;
        bitCounter <= 5'h0;
      end
      if (_GEN & io_en)
        transmitReg <= {1'h0, io_buf, io_gain_n, io_shdn_n, io_dataIn_value};
      cs_n_reg <= ~io_en | (_GEN ? ~io_en & cs_n_reg : _GEN_0 & bitCounter[4] | cs_n_reg);
      sdi_reg <= io_en & (_GEN | ~_GEN_1 ? sdi_reg : _sdi_reg_T_3[0]);
      ldac_n_reg <=
        ~io_en | (_GEN ? io_en | ldac_n_reg : (_GEN_0 | state != 2'h2) & ldac_n_reg);
    end
  end // always @(posedge)
  assign io_cs_n = cs_n_reg;
  assign io_sdi = sdi_reg;
  assign io_ldac_n = ldac_n_reg;
endmodule

module TopModule(
  input         clock,
                reset,
  output        UART_TX,
                UART_TX_CHANNEL_ready,
  input         UART_TX_CHANNEL_valid,
  input  [7:0]  UART_TX_CHANNEL_bits,
  output        UART_TX_BUSY,
  input         UART_RX,
                UART_RX_CHANNEL_ready,
  output        UART_RX_CHANNEL_valid,
  output [7:0]  UART_RX_CHANNEL_bits,
  output        UART_RX_ERROR,
  input         DFB1_ADC_SCLK,
                DFB1_ADC_CS,
                DFB1_ADC_DOUT,
  output [11:0] DFB1_ADC_DATA_A_value,
                DFB1_ADC_DATA_B_value,
  input         DFB1_ADC_GATE_IN,
                DFB1_ADC_GATE_OUT,
  output        DFB1_ADC_FULL_A,
                DFB1_ADC_FULL_B,
                DFB1_ADC_EMPTY_A,
                DFB1_ADC_EMPTY_B,
  input         DFB2_ADC_SCLK,
                DFB2_ADC_CS,
                DFB2_ADC_DOUT,
  output [11:0] DFB2_ADC_DATA_A_value,
                DFB2_ADC_DATA_B_value,
  input         DFB2_ADC_GATE_IN,
                DFB2_ADC_GATE_OUT,
  output        DFB2_ADC_FULL_A,
                DFB2_ADC_FULL_B,
                DFB2_ADC_EMPTY_A,
                DFB2_ADC_EMPTY_B,
  input         DFB3_ADC_SCLK,
                DFB3_ADC_CS,
                DFB3_ADC_DOUT,
  output [11:0] DFB3_ADC_DATA_A_value,
                DFB3_ADC_DATA_B_value,
  input         DFB3_ADC_GATE_IN,
                DFB3_ADC_GATE_OUT,
  output        DFB3_ADC_FULL_A,
                DFB3_ADC_FULL_B,
                DFB3_ADC_EMPTY_A,
                DFB3_ADC_EMPTY_B,
  input         DFB4_ADC_SCLK,
                DFB4_ADC_CS,
                DFB4_ADC_DOUT,
  output [11:0] DFB4_ADC_DATA_A_value,
                DFB4_ADC_DATA_B_value,
  input         DFB4_ADC_GATE_IN,
                DFB4_ADC_GATE_OUT,
  output        DFB4_ADC_FULL_A,
                DFB4_ADC_FULL_B,
                DFB4_ADC_EMPTY_A,
                DFB4_ADC_EMPTY_B,
  input         TEC1_ADC_SCLK,
                TEC1_ADC_CS,
                TEC1_ADC_DOUT,
  output [11:0] TEC1_ADC_DATA_A_value,
                TEC1_ADC_DATA_B_value,
  input         TEC1_ADC_GATE_IN,
                TEC1_ADC_GATE_OUT,
  output        TEC1_ADC_FULL_A,
                TEC1_ADC_FULL_B,
                TEC1_ADC_EMPTY_A,
                TEC1_ADC_EMPTY_B,
  input         TEC2_ADC_SCLK,
                TEC2_ADC_CS,
                TEC2_ADC_DOUT,
  output [11:0] TEC2_ADC_DATA_A_value,
                TEC2_ADC_DATA_B_value,
  input         TEC2_ADC_GATE_IN,
                TEC2_ADC_GATE_OUT,
  output        TEC2_ADC_FULL_A,
                TEC2_ADC_FULL_B,
                TEC2_ADC_EMPTY_A,
                TEC2_ADC_EMPTY_B,
  input         TEC3_ADC_SCLK,
                TEC3_ADC_CS,
                TEC3_ADC_DOUT,
  output [11:0] TEC3_ADC_DATA_A_value,
                TEC3_ADC_DATA_B_value,
  input         TEC3_ADC_GATE_IN,
                TEC3_ADC_GATE_OUT,
  output        TEC3_ADC_FULL_A,
                TEC3_ADC_FULL_B,
                TEC3_ADC_EMPTY_A,
                TEC3_ADC_EMPTY_B,
  input         TEC4_ADC_SCLK,
                TEC4_ADC_CS,
                TEC4_ADC_DOUT,
  output [11:0] TEC4_ADC_DATA_A_value,
                TEC4_ADC_DATA_B_value,
  input         TEC4_ADC_GATE_IN,
                TEC4_ADC_GATE_OUT,
  output        TEC4_ADC_FULL_A,
                TEC4_ADC_FULL_B,
                TEC4_ADC_EMPTY_A,
                TEC4_ADC_EMPTY_B,
  input         DFB1_DAC_SCK,
  output        DFB1_DAC_CS,
                DFB1_DAC_SDI,
                DFB1_DAC_LDAC,
  input         DFB1_DAC_EN,
                DFB1_DAC_BUF,
                DFB1_DAC_GAIN_N,
                DFB1_DAC_SHDN_N,
  input  [11:0] DFB1_DAC_DATA_IN_value,
  input         DFB2_DAC_SCK,
  output        DFB2_DAC_CS,
                DFB2_DAC_SDI,
                DFB2_DAC_LDAC,
  input         DFB2_DAC_EN,
                DFB2_DAC_BUF,
                DFB2_DAC_GAIN_N,
                DFB2_DAC_SHDN_N,
  input  [11:0] DFB2_DAC_DATA_IN_value,
  input         DFB3_DAC_SCK,
  output        DFB3_DAC_CS,
                DFB3_DAC_SDI,
                DFB3_DAC_LDAC,
  input         DFB3_DAC_EN,
                DFB3_DAC_BUF,
                DFB3_DAC_GAIN_N,
                DFB3_DAC_SHDN_N,
  input  [11:0] DFB3_DAC_DATA_IN_value,
  input         DFB4_DAC_SCK,
  output        DFB4_DAC_CS,
                DFB4_DAC_SDI,
                DFB4_DAC_LDAC,
  input         DFB4_DAC_EN,
                DFB4_DAC_BUF,
                DFB4_DAC_GAIN_N,
                DFB4_DAC_SHDN_N,
  input  [11:0] DFB4_DAC_DATA_IN_value,
  input         DFBM1_DAC_SCK,
  output        DFBM1_DAC_CS,
                DFBM1_DAC_SDI,
                DFBM1_DAC_LDAC,
  input         DFBM1_DAC_EN,
                DFBM1_DAC_BUF,
                DFBM1_DAC_GAIN_N,
                DFBM1_DAC_SHDN_N,
  input  [11:0] DFBM1_DAC_DATA_IN_value,
  input         DFBM2_DAC_SCK,
  output        DFBM2_DAC_CS,
                DFBM2_DAC_SDI,
                DFBM2_DAC_LDAC,
  input         DFBM2_DAC_EN,
                DFBM2_DAC_BUF,
                DFBM2_DAC_GAIN_N,
                DFBM2_DAC_SHDN_N,
  input  [11:0] DFBM2_DAC_DATA_IN_value,
  input         DFBM3_DAC_SCK,
  output        DFBM3_DAC_CS,
                DFBM3_DAC_SDI,
                DFBM3_DAC_LDAC,
  input         DFBM3_DAC_EN,
                DFBM3_DAC_BUF,
                DFBM3_DAC_GAIN_N,
                DFBM3_DAC_SHDN_N,
  input  [11:0] DFBM3_DAC_DATA_IN_value,
  input         DFBM4_DAC_SCK,
  output        DFBM4_DAC_CS,
                DFBM4_DAC_SDI,
                DFBM4_DAC_LDAC,
  input         DFBM4_DAC_EN,
                DFBM4_DAC_BUF,
                DFBM4_DAC_GAIN_N,
                DFBM4_DAC_SHDN_N,
  input  [11:0] DFBM4_DAC_DATA_IN_value,
  input         TEC1_DAC_SCK,
  output        TEC1_DAC_CS,
                TEC1_DAC_SDI,
                TEC1_DAC_LDAC,
  input         TEC1_DAC_EN,
                TEC1_DAC_BUF,
                TEC1_DAC_GAIN_N,
                TEC1_DAC_SHDN_N,
  input  [11:0] TEC1_DAC_DATA_IN_value,
  input         TEC2_DAC_SCK,
  output        TEC2_DAC_CS,
                TEC2_DAC_SDI,
                TEC2_DAC_LDAC,
  input         TEC2_DAC_EN,
                TEC2_DAC_BUF,
                TEC2_DAC_GAIN_N,
                TEC2_DAC_SHDN_N,
  input  [11:0] TEC2_DAC_DATA_IN_value,
  input         TEC3_DAC_SCK,
  output        TEC3_DAC_CS,
                TEC3_DAC_SDI,
                TEC3_DAC_LDAC,
  input         TEC3_DAC_EN,
                TEC3_DAC_BUF,
                TEC3_DAC_GAIN_N,
                TEC3_DAC_SHDN_N,
  input  [11:0] TEC3_DAC_DATA_IN_value,
  input         TEC4_DAC_SCK,
  output        TEC4_DAC_CS,
                TEC4_DAC_SDI,
                TEC4_DAC_LDAC,
  input         TEC4_DAC_EN,
                TEC4_DAC_BUF,
                TEC4_DAC_GAIN_N,
                TEC4_DAC_SHDN_N,
  input  [11:0] TEC4_DAC_DATA_IN_value
);

  UartCore uart (
    .clock               (clock),
    .reset               (reset),
    .io_tx_txd           (UART_TX),
    .io_tx_channel_ready (UART_TX_CHANNEL_ready),
    .io_tx_channel_valid (UART_TX_CHANNEL_valid),
    .io_tx_channel_bits  (UART_TX_CHANNEL_bits),
    .io_tx_busy          (UART_TX_BUSY),
    .io_rx_rxd           (UART_RX),
    .io_rx_channel_valid (UART_RX_CHANNEL_valid),
    .io_rx_channel_bits  (UART_RX_CHANNEL_bits),
    .io_rx_error         (UART_RX_ERROR)
  );
  ADC122S625Core dfb1_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (DFB1_ADC_CS),
    .io_sdo         (DFB1_ADC_DOUT),
    .io_dataA_value (DFB1_ADC_DATA_A_value),
    .io_dataB_value (DFB1_ADC_DATA_B_value),
    .io_sclk        (DFB1_ADC_SCLK),
    .io_gateIn      (DFB1_ADC_GATE_IN),
    .io_gateOut     (DFB1_ADC_GATE_OUT),
    .io_fullA       (DFB1_ADC_FULL_A),
    .io_fullB       (DFB1_ADC_FULL_B),
    .io_emptyA      (DFB1_ADC_EMPTY_A),
    .io_emptyB      (DFB1_ADC_EMPTY_B)
  );
  ADC122S625Core dfb2_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (DFB2_ADC_CS),
    .io_sdo         (DFB2_ADC_DOUT),
    .io_dataA_value (DFB2_ADC_DATA_A_value),
    .io_dataB_value (DFB2_ADC_DATA_B_value),
    .io_sclk        (DFB2_ADC_SCLK),
    .io_gateIn      (DFB2_ADC_GATE_IN),
    .io_gateOut     (DFB2_ADC_GATE_OUT),
    .io_fullA       (DFB2_ADC_FULL_A),
    .io_fullB       (DFB2_ADC_FULL_B),
    .io_emptyA      (DFB2_ADC_EMPTY_A),
    .io_emptyB      (DFB2_ADC_EMPTY_B)
  );
  ADC122S625Core dfb3_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (DFB3_ADC_CS),
    .io_sdo         (DFB3_ADC_DOUT),
    .io_dataA_value (DFB3_ADC_DATA_A_value),
    .io_dataB_value (DFB3_ADC_DATA_B_value),
    .io_sclk        (DFB3_ADC_SCLK),
    .io_gateIn      (DFB3_ADC_GATE_IN),
    .io_gateOut     (DFB3_ADC_GATE_OUT),
    .io_fullA       (DFB3_ADC_FULL_A),
    .io_fullB       (DFB3_ADC_FULL_B),
    .io_emptyA      (DFB3_ADC_EMPTY_A),
    .io_emptyB      (DFB3_ADC_EMPTY_B)
  );
  ADC122S625Core dfb4_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (DFB4_ADC_CS),
    .io_sdo         (DFB4_ADC_DOUT),
    .io_dataA_value (DFB4_ADC_DATA_A_value),
    .io_dataB_value (DFB4_ADC_DATA_B_value),
    .io_sclk        (DFB4_ADC_SCLK),
    .io_gateIn      (DFB4_ADC_GATE_IN),
    .io_gateOut     (DFB4_ADC_GATE_OUT),
    .io_fullA       (DFB4_ADC_FULL_A),
    .io_fullB       (DFB4_ADC_FULL_B),
    .io_emptyA      (DFB4_ADC_EMPTY_A),
    .io_emptyB      (DFB4_ADC_EMPTY_B)
  );
  ADC122S625Core tec1_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (TEC1_ADC_CS),
    .io_sdo         (TEC1_ADC_DOUT),
    .io_dataA_value (TEC1_ADC_DATA_A_value),
    .io_dataB_value (TEC1_ADC_DATA_B_value),
    .io_sclk        (TEC1_ADC_SCLK),
    .io_gateIn      (TEC1_ADC_GATE_IN),
    .io_gateOut     (TEC1_ADC_GATE_OUT),
    .io_fullA       (TEC1_ADC_FULL_A),
    .io_fullB       (TEC1_ADC_FULL_B),
    .io_emptyA      (TEC1_ADC_EMPTY_A),
    .io_emptyB      (TEC1_ADC_EMPTY_B)
  );
  ADC122S625Core tec2_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (TEC2_ADC_CS),
    .io_sdo         (TEC2_ADC_DOUT),
    .io_dataA_value (TEC2_ADC_DATA_A_value),
    .io_dataB_value (TEC2_ADC_DATA_B_value),
    .io_sclk        (TEC2_ADC_SCLK),
    .io_gateIn      (TEC2_ADC_GATE_IN),
    .io_gateOut     (TEC2_ADC_GATE_OUT),
    .io_fullA       (TEC2_ADC_FULL_A),
    .io_fullB       (TEC2_ADC_FULL_B),
    .io_emptyA      (TEC2_ADC_EMPTY_A),
    .io_emptyB      (TEC2_ADC_EMPTY_B)
  );
  ADC122S625Core tec3_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (TEC3_ADC_CS),
    .io_sdo         (TEC3_ADC_DOUT),
    .io_dataA_value (TEC3_ADC_DATA_A_value),
    .io_dataB_value (TEC3_ADC_DATA_B_value),
    .io_sclk        (TEC3_ADC_SCLK),
    .io_gateIn      (TEC3_ADC_GATE_IN),
    .io_gateOut     (TEC3_ADC_GATE_OUT),
    .io_fullA       (TEC3_ADC_FULL_A),
    .io_fullB       (TEC3_ADC_FULL_B),
    .io_emptyA      (TEC3_ADC_EMPTY_A),
    .io_emptyB      (TEC3_ADC_EMPTY_B)
  );
  ADC122S625Core tec4_adc (
    .clock          (clock),
    .reset          (reset),
    .io_cs_n        (TEC4_ADC_CS),
    .io_sdo         (TEC4_ADC_DOUT),
    .io_dataA_value (TEC4_ADC_DATA_A_value),
    .io_dataB_value (TEC4_ADC_DATA_B_value),
    .io_sclk        (TEC4_ADC_SCLK),
    .io_gateIn      (TEC4_ADC_GATE_IN),
    .io_gateOut     (TEC4_ADC_GATE_OUT),
    .io_fullA       (TEC4_ADC_FULL_A),
    .io_fullB       (TEC4_ADC_FULL_B),
    .io_emptyA      (TEC4_ADC_EMPTY_A),
    .io_emptyB      (TEC4_ADC_EMPTY_B)
  );
  MCP4921Core dfb1_dac (
    .reset           (reset),
    .io_en           (DFB1_DAC_EN),
    .io_buf          (DFB1_DAC_BUF),
    .io_gain_n       (DFB1_DAC_GAIN_N),
    .io_shdn_n       (DFB1_DAC_SHDN_N),
    .io_cs_n         (DFB1_DAC_CS),
    .io_sdi          (DFB1_DAC_SDI),
    .io_ldac_n       (DFB1_DAC_LDAC),
    .io_dataIn_value (DFB1_DAC_DATA_IN_value),
    .io_sclk         (DFB1_DAC_SCK)
  );
  MCP4921Core dfb2_dac (
    .reset           (reset),
    .io_en           (DFB2_DAC_EN),
    .io_buf          (DFB2_DAC_BUF),
    .io_gain_n       (DFB2_DAC_GAIN_N),
    .io_shdn_n       (DFB2_DAC_SHDN_N),
    .io_cs_n         (DFB2_DAC_CS),
    .io_sdi          (DFB2_DAC_SDI),
    .io_ldac_n       (DFB2_DAC_LDAC),
    .io_dataIn_value (DFB2_DAC_DATA_IN_value),
    .io_sclk         (DFB2_DAC_SCK)
  );
  MCP4921Core dfb3_dac (
    .reset           (reset),
    .io_en           (DFB3_DAC_EN),
    .io_buf          (DFB3_DAC_BUF),
    .io_gain_n       (DFB3_DAC_GAIN_N),
    .io_shdn_n       (DFB3_DAC_SHDN_N),
    .io_cs_n         (DFB3_DAC_CS),
    .io_sdi          (DFB3_DAC_SDI),
    .io_ldac_n       (DFB3_DAC_LDAC),
    .io_dataIn_value (DFB3_DAC_DATA_IN_value),
    .io_sclk         (DFB3_DAC_SCK)
  );
  MCP4921Core dfb4_dac (
    .reset           (reset),
    .io_en           (DFB4_DAC_EN),
    .io_buf          (DFB4_DAC_BUF),
    .io_gain_n       (DFB4_DAC_GAIN_N),
    .io_shdn_n       (DFB4_DAC_SHDN_N),
    .io_cs_n         (DFB4_DAC_CS),
    .io_sdi          (DFB4_DAC_SDI),
    .io_ldac_n       (DFB4_DAC_LDAC),
    .io_dataIn_value (DFB4_DAC_DATA_IN_value),
    .io_sclk         (DFB4_DAC_SCK)
  );
  MCP4921Core dfbm1_dac (
    .reset           (reset),
    .io_en           (DFBM1_DAC_EN),
    .io_buf          (DFBM1_DAC_BUF),
    .io_gain_n       (DFBM1_DAC_GAIN_N),
    .io_shdn_n       (DFBM1_DAC_SHDN_N),
    .io_cs_n         (DFBM1_DAC_CS),
    .io_sdi          (DFBM1_DAC_SDI),
    .io_ldac_n       (DFBM1_DAC_LDAC),
    .io_dataIn_value (DFBM1_DAC_DATA_IN_value),
    .io_sclk         (DFBM1_DAC_SCK)
  );
  MCP4921Core dfbm2_dac (
    .reset           (reset),
    .io_en           (DFBM2_DAC_EN),
    .io_buf          (DFBM2_DAC_BUF),
    .io_gain_n       (DFBM2_DAC_GAIN_N),
    .io_shdn_n       (DFBM2_DAC_SHDN_N),
    .io_cs_n         (DFBM2_DAC_CS),
    .io_sdi          (DFBM2_DAC_SDI),
    .io_ldac_n       (DFBM2_DAC_LDAC),
    .io_dataIn_value (DFBM2_DAC_DATA_IN_value),
    .io_sclk         (DFBM2_DAC_SCK)
  );
  MCP4921Core dfbm3_dac (
    .reset           (reset),
    .io_en           (DFBM3_DAC_EN),
    .io_buf          (DFBM3_DAC_BUF),
    .io_gain_n       (DFBM3_DAC_GAIN_N),
    .io_shdn_n       (DFBM3_DAC_SHDN_N),
    .io_cs_n         (DFBM3_DAC_CS),
    .io_sdi          (DFBM3_DAC_SDI),
    .io_ldac_n       (DFBM3_DAC_LDAC),
    .io_dataIn_value (DFBM3_DAC_DATA_IN_value),
    .io_sclk         (DFBM3_DAC_SCK)
  );
  MCP4921Core dfbm4_dac (
    .reset           (reset),
    .io_en           (DFBM4_DAC_EN),
    .io_buf          (DFBM4_DAC_BUF),
    .io_gain_n       (DFBM4_DAC_GAIN_N),
    .io_shdn_n       (DFBM4_DAC_SHDN_N),
    .io_cs_n         (DFBM4_DAC_CS),
    .io_sdi          (DFBM4_DAC_SDI),
    .io_ldac_n       (DFBM4_DAC_LDAC),
    .io_dataIn_value (DFBM4_DAC_DATA_IN_value),
    .io_sclk         (DFBM4_DAC_SCK)
  );
  MCP4921Core tec1_dac (
    .reset           (reset),
    .io_en           (TEC1_DAC_EN),
    .io_buf          (TEC1_DAC_BUF),
    .io_gain_n       (TEC1_DAC_GAIN_N),
    .io_shdn_n       (TEC1_DAC_SHDN_N),
    .io_cs_n         (TEC1_DAC_CS),
    .io_sdi          (TEC1_DAC_SDI),
    .io_ldac_n       (TEC1_DAC_LDAC),
    .io_dataIn_value (TEC1_DAC_DATA_IN_value),
    .io_sclk         (TEC1_DAC_SCK)
  );
  MCP4921Core tec2_dac (
    .reset           (reset),
    .io_en           (TEC2_DAC_EN),
    .io_buf          (TEC2_DAC_BUF),
    .io_gain_n       (TEC2_DAC_GAIN_N),
    .io_shdn_n       (TEC2_DAC_SHDN_N),
    .io_cs_n         (TEC2_DAC_CS),
    .io_sdi          (TEC2_DAC_SDI),
    .io_ldac_n       (TEC2_DAC_LDAC),
    .io_dataIn_value (TEC2_DAC_DATA_IN_value),
    .io_sclk         (TEC2_DAC_SCK)
  );
  MCP4921Core tec3_dac (
    .reset           (reset),
    .io_en           (TEC3_DAC_EN),
    .io_buf          (TEC3_DAC_BUF),
    .io_gain_n       (TEC3_DAC_GAIN_N),
    .io_shdn_n       (TEC3_DAC_SHDN_N),
    .io_cs_n         (TEC3_DAC_CS),
    .io_sdi          (TEC3_DAC_SDI),
    .io_ldac_n       (TEC3_DAC_LDAC),
    .io_dataIn_value (TEC3_DAC_DATA_IN_value),
    .io_sclk         (TEC3_DAC_SCK)
  );
  MCP4921Core tec4_dac (
    .reset           (reset),
    .io_en           (TEC4_DAC_EN),
    .io_buf          (TEC4_DAC_BUF),
    .io_gain_n       (TEC4_DAC_GAIN_N),
    .io_shdn_n       (TEC4_DAC_SHDN_N),
    .io_cs_n         (TEC4_DAC_CS),
    .io_sdi          (TEC4_DAC_SDI),
    .io_ldac_n       (TEC4_DAC_LDAC),
    .io_dataIn_value (TEC4_DAC_DATA_IN_value),
    .io_sclk         (TEC4_DAC_SCK)
  );
endmodule

